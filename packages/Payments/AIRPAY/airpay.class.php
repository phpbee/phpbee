<?php
 /*
 *  AirPay - Payment System
 *  Contact: info@airpay.lv
 *  Version: 1.2
 *  Date: 01.01.2011
 *  Updated: 29.10.2013
 */

 class airpay {

	/**
	* URL for AirPay server
	*/

	var $url		= "https://www.airpayment.net/new/gateway/";
	#var $url		= "https://www.airpayment.net/sandbox/gateway/";


	/**
	* Array for storing the merchant values
	*/

	var $merchant 		= array(
					'id'		=> null,		// merchant ID provided by AirPay
					'secret'	=> null,		// merchant secret code provided by merchant
	);


	/**
	* Array for storing the possible values for payment initiating
	*/

	var $payment_arr 	= array(
					'_cmd'		=> "payment",		// request type
					'merchant_id'	=> null,		// constant value provided by AirPay - autogenerated
					'amount'	=> null,		// minor units, e.g. 1 for 0.01
					'currency'	=> null,		// currency code in ISO 4217
					'invoice'	=> null,		// unique transaction value
					'language'	=> null,		// language: LAT, RUS, ENG
					'cl_fname'	=> null,		// client's first name
					'cl_lname'	=> null,		// client's last name
					'cl_email'	=> null,		// client's e-mail address
					'cl_country'	=> null,		// country code in ISO 3166-1-alpha-2
					'cl_city'	=> null,		// city name
					'description'	=> null,		// description of the transaction, visible to the client, e.g. description of the product
					'psys'		=> null,		// payment system alias. empty for default or taken from $airpay->psystems
					'hash'		=> null			// hash to sign the request - autogenerated
	);


	/**
	* Constructor
	*
	* @param  integer $mc_id 	// merchant ID, provided by AirPay
	* @param  string $mc_secret	// merchant secret key, provided by merchant
	*
	* @return void
	*/

	function __construct ($mc_id, $mc_secret) {
		$this->merchant['id']		= $mc_id;
		$this->merchant['secret']	= $mc_secret;
	}


	/**
	* List of available payment system aliases
	* It's better to cache it locally instead of request AirPay server for each client
	*
	* @return array			// CC = credit card; EM = E-money; IB = Internet bank
	*				// cat_id = same as above but integer
	*				// alias = payment system alias in AirPay system
	*				// title = payment system title in AirPay system
	*/

	function psystems () {
		$data = array (
			'_cmd'		=> "psystems",
			'merchant_id'	=> $this->merchant['id'],
			'hash' 		=> md5($this->merchant['id'].$this->merchant['secret'])
		);

		$ret = $this->_post($this->url, $data);

		$res = $this->response ($ret, 'psystems');

		return $res;
	}


	/**
	* Request for transaction info
	*
	* @param  integer $transaction_id 	// transaction ID at AirPay
	*
	* @return array
	*/

	function request ($transaction_id) {
		$data = array (
			'_cmd'		=> "request",
			'invoice'	=> $transaction_id,
			'hash' 		=> md5($transaction_id.$this->merchant['id'].$this->merchant['secret'])
		);

		$ret = $this->_post($this->url, $data);

		$res = $this->response ($ret, 'request');

		if ($res['has_referers'] == 0) {
			unset($res['has_referers']);
			return $res;
		} else {
			for ($q = 1; $q <= sizeof($res['has_referers']); $q ++) {
				foreach($res as $k => $v) {
					if (substr($k, 0, 4) == 'ref'.$q) 	$resp['ref'][ ($q - 1) ][ str_replace('ref'.$q.'_', '', $k) ] = $v;
					else 					$resp[$k] = $v;
				}
			}
		}

		return $resp;
	}


	/**
	* Request for payment initiating
	*
	* @param  array $data		 	// transaction ID at AirPay
	*					// all fields are mandatory, uses $this->payment_arr array
	*
	* @return HTML form with the button
	*/

	function payment ($data) {

		$this->payment_arr['merchant_id']	= $this->merchant['id'];
		$this->payment_arr['hash']		= md5($data['amount'].$data['currency'].$this->merchant['id'].$this->merchant['secret']);

		$form = '<form method="post" name="pform" action="'.$this->url.'">';

		foreach ($this->payment_arr as $k => $v)
			$form .= '<input name="'.$k.'" type="hidden" value="'.(isset($data[$k]) ? $data[$k] : $v).'">';

		$form .= '<input name="butPay" type="submit" value="Pay Now!">';

		$form .= '</form>';

		echo $form;
	}


	/**
	* Request for payment transaction ID
	*
	* @param  array $data		 	// transaction ID at AirPay
	*					// all fields are mandatory, uses $this->payment_arr array
	*
	* @return HASH, URL and transaction ID 	// You can redirect the client for the payment.
	*					// use it to store the AirPay transaction ID locally before the payment initiating
	*/

	function payment_req ($data) {

		$data['_cmd']		= "payment";
		$data['merchant_id']	= $this->merchant['id'];
		$data['hash']		= md5($data['amount'].$data['currency'].$this->merchant['id'].$this->merchant['secret']);
		$data['get_trans']	= 1;

		$ret = $this->_post($this->url, $data);

		if (substr($ret, 0, 2) == 'OK') {
			list($res['status'], $res['url']) = explode("\n", $ret);
			$tmp = explode('=', $res['url']);
			list($res['hash'], $res['transaction_id']) = explode(',', $tmp[1]);
			return $res;
		} else {
			$res = array(
				'status'	=> 'ERROR',
				'description'	=> $ret
			);
			return $res;
		}
	}


	/**
	* Response processing
	*
	* @param  array $arr		 	// response array received from the AirPay
	* @param  string $type		 	// type of request / response
	*					// values: return, request, status, psystems
	*
	* @return array 			// Either processed data or error
	*					// different results depending on the $type
	*/

	function response ($arr, $type = '') {
		switch ($type) {
			case 'return':
				if (md5(htmlspecialchars_decode($arr['transaction_id']).$this->merchant['id'].$this->merchant['secret']) == $arr['transaction_hash'])
					return $arr;
				break;

			case 'request':
				$arr = explode('&', $arr);
				for ($q=0; $q<sizeof($arr); $q++) {
					list ($k, $v) = explode('=', $arr[$q]);
					$res[ $k ] = $v;
				}

				if (isset($res['error_code']))	return $res;

				$arr = $res;
				if (md5($arr['transaction_id'].$arr['amount'].$arr['currency'].$this->merchant['id'].$arr['status_id'].$this->merchant['secret']) == $arr['hash'])
					return $arr;
				break;

			case 'status':
				if (md5($arr['transaction_id'].$arr['amount'].$arr['currency'].$this->merchant['id'].$arr['status_id'].$this->merchant['secret']) == $arr['hash'])
					return $arr;
				break;

			case 'psystems':
				list ($status, $sarr) = explode("\n", $arr);

				if ($status == 'OK') return unserialize($sarr);

				break;

		}

		return false;
	}


	/**
	* Local method: Post data
	*
	* @param  string $url		 	// url where to POST
	* @param  array $post		 	// data for the POST
	*
	* @return string 			// answer from the server
	*/

	function _post ($url, $post) {
	
		return html_fetch($url,$post,'POST');

		/*


		foreach ($post as $k => $v)	$post_l[] = $k."=".$v;

		$ch = curl_init($url);
		curl_setopt($ch, CURLOPT_POST      		, 1);
		curl_setopt($ch, CURLOPT_POSTFIELDS    		, implode('&', $post_l));
		#curl_setopt($ch, CURLOPT_FOLLOWLOCATION  	, 1); 
		curl_setopt($ch, CURLOPT_HEADER      		, 0);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER  	, 1);
		$res = curl_exec($ch);

		return $res;
		*/
	}

 }

